<?xml version="1.0" encoding="UTF-8"?>
<!-- 1.Logbacks Status Printer Status Messages and dynamic Log Configurations 
	Logback includes a StatusPrinter: please add debug=”true” debug = “true” 
	causes Logback at Startup to dump the Status of the configuration file – 
	very handy. 2.Logback scans Configuration (automagically re-configuration) 
	another very useful attribute is Scan=”true” scan=”true” allows you to change 
	the Configuration File while your application is running – so its very easy 
	to add a Class with Debug Level while testing a running application. If scan=”true” 
	Logback scans for changes (default: every 60 seconds) and if Logback founds 
	changes, Logback reconfigures itself I really like this feature. You can 
	even register a status listener to supervise logbacks internal state. -->
<configuration debug="true">

	<property name="LEVEL" value="DEBUG" />

	<property name="PRINT_LOG_BASE_PATH" value="/usr/local/resin/log/" />

	<contextName>active-front</contextName>
	<jmxConfigurator />

	<timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss" />

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>%contextName %level %logger %msg%n</Pattern>
		</layout>
	</appender>

	<appender name="LIBRARY_FRONT"
		class="ch.qos.logback.core.ConsoleAppender">

		<file>${PRINT_LOG_BASE_PATH}active-front.log</file>

		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${PRINT_LOG_BASE_PATH}active-front.log.%d{yyyy-MM-dd}</fileNamePattern>
			<!-- maxHistory>30</maxHistory -->
		</rollingPolicy>

		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>${LEVEL}</level>
		</filter>
		<!-- <filter class="ch.qos.logback.classic.filter.LevelFilter"> <level>DEBUG</level> 
			<OnMismatch>DENY</OnMismatch> <OnMatch>ACCEPT</OnMatch> </filter> -->

		<layout class="ch.qos.logback.classic.PatternLayout">
			<!--<Pattern>%date %level %logger{15} %msg [%thread] [%file:%line]%n</Pattern> -->
			<Pattern>%date [%file:%line] [%level] %msg%n</Pattern>
		</layout>
	</appender>
	

	<root level="TRACE">
		<!-- <appender-ref ref="STDOUT" /> <appender-ref ref="multiplex" /> <appender-ref 
			ref="FILE" /> -->
	</root>

	<logger name="library">
		<appender-ref ref="LIBRARY_FRONT" />
	</logger>
</configuration>